//frontend code(html+js)

<html>
    <body>
        <h1> BOOKING APPOINTMENT FORM </h1>
        <form onsubmit="userDetails(event)">
            <label> Name: </label>
            <input type="text" name="Username" id="username" required> </br></br>
            <label> E-mail id: </label>
            <input type="email" name="EmailId" id="email" required> </br></br>
            <label> Phone number: </label> 
            <input type="number" name="Phonenumber" id="phonenumber" > </br></br>
            <button> submit</button>
        </form>
        <ul id='listOfitems'></ul>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.3/axios.min.js">
        </script>
        <script>
            function userDetails(event)
            {
                event.preventDefault();
                const name = event.target.Username.value;
                const email = event.target.EmailId.value;
                const phno = event.target.Phonenumber.value;
                //localStorage.setItem('name',name);
                //localStorage.setItem('emailid',email);
                //localStorage.setItem('phno',phno);
                const obj={
                    name,
                    email,
                    phno 
                }
                axios.post("http://localhost:3000/user/add-user",obj)
                    .then((response) => {
                        showUserOnScreen(response.data.newUserDetail);
                        console.log(response)
                    })
                    .catch((err) => {
                        document.body.innerHTML=document.body.innerHTML + "<h4> Something went wrong </h4>"
                        console.log(err)
                    })
                    }
                     
                //localStorage.setItem(obj.email,JSON.stringify(obj));
                //showuseronscreen(obj)
            
            window.addEventListener("DOMContentLoaded", () => {
                axios.get("http://localhost:3000/user/get-users")
                .then((response) => {
                    console.log(response)

                    for(var i=0;i<response.data.allUsers.length;i++){
                        showUserOnScreen(response.data.allUsers[i])
                    }
                })
                .catch((error) => {
                    console.log(error) 
                })
            })   
    
            function showUserOnScreen(user){

                document.getElementById('email').value = '';
                document.getElementById('username').value = '';
                document.getElementById('phonenumber').value = '';
               //console.log(localstorage.getItem(user.email))
                /*if(localStorage.getItem(user.email) !== null)

                    {
                        removeUserFromScreen(user.email)
                    } */ 

                    const parentNode= document.getElementById('listOfitems');
                    const childHTML =`<li id=${user.id}> ${user.name} - ${user.email} 
                                          <button onclick=deleteUser('${user.id}')> Delete user</button>
                                          <button onclick=editUserDetails('${user.email}','${user.name}','${user.phno}','${user.id}')>Edit user </button>
                                        </li>`
                    parentNode.innerHTML = parentNode.innerHTML + childHTML;

    }

            function editUserDetails(emailId,name,phno,userId)
            {
                    
                    document.getElementById('email').value = emailId
                    document.getElementById('username').value = name
                    document.getElementById('phonenumber').value = phno

                    deleteUser(userId)
            }

           function deleteUser(userId){
                axios.delete(`http://localhost:3000/user/delete-user/${userId}`)
                .then((response) => {
                removeUserFromScreen(userId)
            })
                .catch((err) => {
                console.log(err)
            })
        }
            //console.log(email)
            //localStorage.removeItem(email)
            //removeUserFromScreen(email)

            function removeUserFromScreen(userId){
                const parentNode =document.getElementById('listOfitems');
                const childNodeToBeDeleted = document.getElementById(userId)
                if(childNodeToBeDeleted)
                    {
                        parentNode.removeChild(childNodeToBeDeleted)
                    }
        }
        </script>
    </body>
</html>

//backend code
//app.js
const path = require('path');

const express = require('express');

const bodyParser = require('body-parser');

//const errorController = require('./controllers/error');

const sequelize = require('./util/database');

const User = require('./models/User');
var cors = require('cors');

const app = express();

app.use(cors());

//app.set('view engine','ejs');
//app.set('views','views');

//const adminRoutes = require('./routes/admin');
//const shopRoutes = require('./routes/shop');
const userRoutes = require('../routes/user')

app.use(bodyParser.json({ extended:false }));
app.use(express.static(path.join(__dirname, 'public')));

//app.use('/admin',adminRoutes);
//app.use(shopRoutes);

app.use('/user',userRoutes);

//app.use(errorController.get404);

sequelize.sync().then(result => {
    //console.log(result);
    app.listen(3000);
    })
    .catch((err) => console.log(err))

//controllers
//user.js

const User = require('./models/User')

const addUser = async(req,res) => {

    try{
    const name = req.body.name;
    const email= req.body.email;
    const phonenumber= req.body.phno;
    
    const data = await User.create( {name:name, email: email, phonenumber: phonenumber});
    res.status(201).json({newUserDetail: data});
    }catch(err){
        console.log(err)
        res.status(500).json({
            error:err
        })
    }
}

const getUser = async(req,res,next) => {
    try{
        const users = await User.findAll();
        res.status(200).json({allUsers: users});
    }catch(error){
        console.log('Get user is failing', JSON.stringify(error));
        res.status(500).json({error: error})
    }
}

const deleteUser = async (req,res) => {
    try{
        if(req.params.id == 'undefined'){
            console.log('ID is missing')
            return res.status(400).json({err: 'ID is missing'})
        }
    const uId = req.params.id;
    await User.destroy({where: {id: uId}});
    res.sendStatus(200);    
    }catch(err){
        console.log(err);
        res.status(500).json(err)
    }
}

module.exports = {
    addUser,
    getUser,
    deleteUser

}

//models
//User.js

const Sequelize = require('sequelize');

const sequelize = require('../util/database');

const User = sequelize.define('user', {
    id:{
        type:Sequelize.INTEGER,
        autoIncrement:true,
        allowNull:false,
        primaryKey:true             
    },
    name:Sequelize.STRING,
    email:{
        type:Sequelize.STRING,
        unique:true
    },
    phonenumber:{
        type:Sequelize.INTEGER,
        unique:true                           
    }
});

module.exports = User;

//routes
//user.js

const express = require('express')

const router = express.Router();
const usercontroller = require('../controllers/user')

router.post('/add-user', usercontroller.addUser);

router.get('/get-users', usercontroller.getUser);

router.delete('/delete-user/:id', usercontroller.deleteUser);

module.exports = router;

//util
//database.js

const Sequelize = require('sequelize')

const sequelize = new Sequelize('praneethdb','root','Praneeth@135', {
    dialect: 'mysql',
    host:'localhost'
});

module.exports = sequelize;

//package.json(to check all packages what to install when we again execute this code)
{
  "name": "nodemon",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon app.js",
    "start-server": "node app.js"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "nodemon": "^2.0.22"
  },
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "express-handlebars": "^7.0.4",
    "mysql2": "^3.2.0",
    "sequelize": "^6.31.0",
    "views": "^1.0.2"
  }
}

//first npm install --save nodemon and evry package install in this format like npm install --save mysql2 and for cors use npm i install
